<?

/**
 * Actions
 *
 * ProcessWire 2.x 
 * Copyright (C) 2016 by Artem Nedodaev
 * This file licensed under Mozilla Public License v2.0 http://mozilla.org/MPL/2.0/
 * 
 * https://processwire.com
 * http://anwes.ru
 *
 */

class Actions extends Process implements Module, ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => __('Actions'), // getModuleInfo title          
			'summary' => __('Provide action to another modules or scripts'), // getModuleInfo summary 
			'version' => 0.09,
			'permanent' => false, 
			'singular' => true,
			'icon' => 'link'
			);
	}

	const pageName = 'action';

	public function init() {
		parent::init();
	}

	public function ___install() {

		$fieldgroup = new Fieldgroup();
		$fieldgroup->name = "action";
		$fieldgroup->add(wire('fields')->get("title"));
		$fieldgroup->save();	


		if(!$fieldgroup->id) throw new WireException("Unable to create repeater fieldgroup: action"); 

		//Create template for action page
		$template = new Template(); 
		$template->name = "action"; 
		$template->fieldgroup = $fieldgroup; 
		$template->flags = Template::flagSystem;	
		$template->noChildren = 1;
		$template->noParents = 1; // prevents users from creating pages with this template, but not us
		$template->noGlobal = 1; 
		$template->urlSegments = 1; 
		$template->slashUrls = 1; 
		$template->save();
		$this->message("Added Template: {$template->name}");

		//Create hidden action pages
		$page = new Page();
		$page->template = 'action';
		$page->parent = $this->pages->get("/");
		$page->status = Page::statusHidden | Page::statusLocked;
		$page->name = self::pageName;
		$page->title = 'Actions';
		$page->save();

		$this->message("Added Page: {$page->path}");

		//Copy nessesary files to /site/templates/

		$createDir = mkdir( __DIR__."/../../templates/actions", 0755, true);
		$copyIndexFile = copy (__DIR__."/index.php" , __DIR__."/../../templates/actions/index.php" );
		$copyActionFile = copy (__DIR__."/action.php" , __DIR__."/../../templates/action.php" );
		
		if($createDir)
			$this->message("Folder /templates/actions/ created");
		else
			$this->message("Can't create folder {/templates/actions/}, do this manualy");

		if($copyIndexFile)
			$this->message("File {index.php} was copied to /templates/actions/ directory");
		else
			$this->message("Can't copy {index.php}, do this manualy");

		if($copyActionFile)
			$this->message("File {action.php} was copied to /templates/ directory");
		else
			$this->message("Can't copy {action.php}, do this manualy");

	}

	public function ___uninstall() {

		//Delete files to /site/templates/

		if(unlink(__DIR__."/../../templates/action.php"))
			$this->message("Remove file {action.php}");
		else
			$this->message("Can't remove file {action.php}, delete manual");

		if(unlink(__DIR__."/../../templates/actions/index.php"))
			$this->message("Remove file {index.php}");
		else
			$this->message("Can't remove file {index.php}, delete manual");

		if(rmdir(__DIR__."/../../templates/actions"))
			$this->message("Remove folder {/templates/actions/}");
		else
			$this->message("Can't remove folder {/templates/actions/}, delete manual");


	// 	$moduleID = $this->modules->getModuleID($this);
	// 	$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName);

	// 	if($page->id) {
	// 		$this->message("Deleting Page: {$page->path}");
	// 		$page->delete();
	// 	}

	}


}